{"version":3,"sources":["components/shared/StyledButton.js","components/shared/StyledInput.js","components/Screen1.js","components/shared/StyledSelect.js","components/Screen2.js","main/ReversePolishNotation.presenter.js","main/ReversePolishNotation.container.js","utils/RPN.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","withStyles","theme","root","height","color","backgroundColor","Button","customInputStyle","makeStyles","createStyles","border","overflow","borderRadius","transition","transitions","create","input","focused","StyledInput","props","classes","TextField","InputProps","disableUnderline","Screen1","handleClick","useState","operand","setOperand","Grid","container","direction","alignItems","justify","style","minHeight","Box","mb","Typography","variant","align","maxWidth","fontFamily","fontWeight","spacing","item","md","xs","type","fullWidth","value","onChange","e","target","label","onClick","background","StyledSelect","options","FormControl","InputLabel","Select","map","option","MenuItem","Screen2","formattedState","solution","operator","state","setState","handleChange","name","console","log","display","flexDirection","justifyContent","key","Math","random","p","ReversePolishNotationPresenter","stack","updateState","Container","length","ReversePolishNotationContainer","setStack","setSolution","getSolution","response","seq","operands","i","push","index","indexOf","a","parseInt","splice","b","RPN","useEffect","stackItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9ac5ff9.chunk.js","sourcesContent":["import { Button, withStyles } from '@material-ui/core'\r\n\r\n\r\nexport const StyledButton = withStyles(theme => ({\r\n  root: {\r\n    height: 55,\r\n    color: \"#fff\",\r\n    backgroundColor: \"#79cea1\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#79cea1\"\r\n    }\r\n  }\r\n}))(Button);\r\n\r\n","import React from \"react\"\r\nimport {  TextField, makeStyles, createStyles, fade } from \"@material-ui/core\";\r\nconst customInputStyle = makeStyles(theme =>\r\n  createStyles({\r\n    root: {\r\n      border: \"1px solid #e2e2e1\",\r\n      overflow: \"hidden\",\r\n      borderRadius: 4,\r\n      backgroundColor: \"#fcfcfb\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      \"&:hover\": {\r\n        backgroundColor: \"#fff\"\r\n      },\r\n      \"&$focused\": {\r\n        backgroundColor: \"#fff\"\r\n      },\r\n      \"& label.Mui-focused\": {\r\n        color: \"orange\"\r\n      }\r\n    },\r\n    input: { color: \"#000\" },\r\n    focused: {}\r\n  })\r\n);\r\n\r\nexport  const StyledInput = props => {\r\n    const classes = customInputStyle(props);\r\n\r\n    return (\r\n      <TextField\r\n        InputProps={{ classes, disableUnderline: true }}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n","import React, { useState } from 'react'\r\nimport { Typography, Grid, Box } from '@material-ui/core'\r\nimport { StyledButton } from './shared/StyledButton'\r\nimport { StyledInput } from './shared/StyledInput'\r\n\r\nconst Screen1 = ({handleClick}) => {\r\n\r\n  const [operand, setOperand] = useState(\"\")\r\n\r\n  const handleChange = (e) => {\r\n    setOperand(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ minHeight: \"100vh\" }}\r\n    >\r\n      <Box mb={6}>\r\n        <Typography\r\n          variant=\"h3\"\r\n          align=\"center\"\r\n          style={{\r\n            maxWidth: 380,\r\n            color: \"#93edd9\",\r\n            fontFamily: \"'Roboto', sans-serif\",\r\n            fontWeight: 100,\r\n          }}\r\n        >\r\n          Expression Evaluator\r\n        </Typography>\r\n      </Box>\r\n      <Grid container spacing={2}>\r\n        <Grid item md={6} xs={12}>\r\n          <StyledInput\r\n            variant=\"filled\"\r\n            type=\"number\"\r\n            fullWidth\r\n            value={operand}\r\n            onChange={handleChange}\r\n            label=\"Please enter a number\"\r\n          />\r\n        </Grid>\r\n        <Grid item md={6} xs={12}>\r\n          <StyledButton fullWidth onClick={() => handleClick(operand)}>\r\n            Add Number\r\n          </StyledButton>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Screen1","import React from \"react\";\r\nimport {  makeStyles, createStyles,  FormControl, InputLabel, Select, MenuItem } from \"@material-ui/core\";\r\nconst customInputStyle = makeStyles(theme =>\r\n  createStyles({\r\n    root: {\r\n      border: \"1px solid #e2e2e1\",\r\n      overflow: \"hidden\",\r\n      borderRadius: 4,\r\n      \"& label.Mui-focused\": {\r\n        color: \"#3f51b5\"\r\n      },\r\n      \"& .MuiFilledInput-root\": {\r\n        background: \"transparent\"\r\n      }\r\n    },\r\n    focused: {}\r\n  })\r\n);\r\n\r\nexport const StyledSelect = ({label, options, ...props}) => {\r\n  const classes = customInputStyle(props);\r\n\r\n  return (\r\n    <FormControl fullWidth variant=\"filled\" classes={classes}>\r\n      <InputLabel >{label}</InputLabel>\r\n      <Select {...props} disableUnderline>\r\n        {options.map(option => (\r\n          <MenuItem value={option}> {option} </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {  Grid, Select, MenuItem, Paper, Box, Typography } from \"@material-ui/core\";\r\nimport { StyledButton } from \"./shared/StyledButton\";\r\nimport { StyledInput } from \"./shared/StyledInput\";\r\nimport { StyledSelect } from \"./shared/StyledSelect\";\r\n\r\n\r\nconst Screen2 = ({ handleClick, formattedState, solution }) => {\r\n  const [state, setState] = useState({\r\n    operand: \"\",\r\n    operator: \"\"\r\n  });\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    console.log(name);\r\n    setState({ ...state, [name]: value });\r\n  };\r\n\r\n  const { operand, operator } = state;\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ minHeight: \"100vh\" }}\r\n    >\r\n      <Box\r\n        mb={6}\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Grid spacing={2} container alignItems=\"center\" justify=\"center\">\r\n          {formattedState.map(item => (\r\n            <Grid item key={`${item}+${Math.random() * 9999}`}>\r\n              <Box p={6} style={{ backgroundColor: \"#ecf5f7\", borderRadius: 10 }}>\r\n                <Typography variant=\"h4\"> {item}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        <Typography variant=\"h2\" align=\"center\">\r\n          =\r\n        </Typography>\r\n        <Typography\r\n          variant=\"h2\"\r\n          align=\"center\"\r\n          style={{\r\n            maxWidth: 380,\r\n            color: \"#93edd9\",\r\n            fontFamily: \"'Roboto', sans-serif\",\r\n            fontWeight: 100\r\n          }}\r\n        >\r\n          {solution}\r\n        </Typography>\r\n      </Box>\r\n      <Grid container spacing={2}>\r\n        <Grid item md={4} xs={6}>\r\n          <StyledSelect\r\n            fullWidth\r\n            value={operator}\r\n            onChange={handleChange}\r\n            label=\"Operator\"\r\n            name=\"operator\"\r\n            options={[\"+\", \"-\", \"*\", \"/\"]}\r\n          />\r\n        </Grid>\r\n        <Grid item md={4} xs={6}>\r\n          <StyledInput\r\n            label=\"Operand\"\r\n            type=\"number\"\r\n            fullWidth\r\n            value={operand}\r\n            onChange={handleChange}\r\n            name=\"operand\"\r\n            variant=\"filled\"\r\n          />\r\n        </Grid>\r\n        <Grid item md={4} xs={12}>\r\n          <StyledButton\r\n            fullWidth\r\n            onClick={() => handleClick([operand, operator])}\r\n          >\r\n            Add Operation\r\n          </StyledButton>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Screen2;\r\n","import React from 'react'\r\nimport Container from '@material-ui/core/Container';\r\nimport Screen1 from '../components/Screen1'\r\nimport Screen2 from '../components/Screen2';\r\n\r\n\r\n\r\nconst ReversePolishNotationPresenter = ({\r\n  solution,\r\n  stack,\r\n  updateState\r\n}) => {\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      {stack.length > 0 && (\r\n        <Screen2\r\n          formattedState={stack}\r\n          solution={solution}\r\n          handleClick={updateState}\r\n        />\r\n      )}\r\n      {stack.length < 1 && <Screen1 handleClick={updateState} />}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReversePolishNotationPresenter","import React, { useState, useEffect } from 'react';\r\nimport ReversePolishNotationPresenter from \"./ReversePolishNotation.presenter\"\r\nimport {RPN} from \"../utils/RPN\"\r\n\r\n\r\nconst ReversePolishNotationContainer = () => {\r\n\r\n  const [stack, setStack] = useState([])\r\n  const [solution, setSolution] = useState()\r\n\r\n\r\n  const getSolution = () => {\r\n    const response = RPN(stack)\r\n    if(response) setSolution(response);\r\n    else{\r\n      setSolution(stack[0]);\r\n    }\r\n\r\n  }\r\n\r\n  const updateState = ( stackItem ) => {\r\n   setStack([...stack, ...stackItem]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getSolution();\r\n  }, [stack]);\r\n\r\n\r\n  return (\r\n    <ReversePolishNotationPresenter\r\n      solution={solution}\r\n      stack={stack}\r\n      updateState={updateState}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ReversePolishNotationContainer;","export const RPN = (seq) =>  {\r\n  if (seq.length <= 2) {\r\n    return;\r\n  }\r\n\r\n  var operands = [\"+\", \"-\", \"*\", \"/\"];\r\n  var stack = [];\r\n  var i = 0;\r\n\r\n  stack.push(seq[i]);\r\n  i++;\r\n\r\n  while (i <= seq.length) {\r\n    var item = seq[i];\r\n    var index = operands.indexOf(item);\r\n    if (index < 0) {\r\n      stack.push(seq[i]);\r\n    } else {\r\n      if (index == 0) {\r\n        var a = parseInt(stack.splice(-1)[0], 10);\r\n        var b = parseInt(stack.splice(-1)[0], 10);\r\n        stack.push(a + b);\r\n      }\r\n      if (index == 1) {\r\n        var a = parseInt(stack.splice(-1)[0], 10);\r\n        var b = parseInt(stack.splice(-1)[0], 10);\r\n        stack.push(b - a);\r\n      }\r\n      if (index == 2) {\r\n        var a = parseInt(stack.splice(-1)[0], 10);\r\n        var b = parseInt(stack.splice(-1)[0], 10);\r\n        stack.push(a * b);\r\n      }\r\n      if (index == 3) {\r\n        var a = parseInt(stack.splice(-1)[0], 10);\r\n        var b = parseInt(stack.splice(-1)[0], 10);\r\n        stack.push(b / a);\r\n      }\r\n    }\r\n    i++;\r\n  }\r\n\r\n  return parseInt(stack[0], 10);\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport ReversePolishNotation from './main/ReversePolishNotation.container';\n\nfunction App() {\n  return <ReversePolishNotation />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}